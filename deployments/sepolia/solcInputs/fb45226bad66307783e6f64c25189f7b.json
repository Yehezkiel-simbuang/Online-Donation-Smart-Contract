{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/ChainlinkPriceFeed.sol": {
      "content": "//SPDX-License-Identifier:MIT\n\npragma solidity ^0.8.18;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceFeed {\n    function EthToUSD(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306);\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        return uint256((price / 1e8) * 1e18);\n    }\n\n    function PriceConverter(\n        uint256 amount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 priceNow = EthToUSD(priceFeed);\n        return uint256((priceNow * amount) / 1e18);\n    }\n}\n"
    },
    "contracts/Donate.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./ChainlinkPriceFeed.sol\";\n\ncontract Donate {\n    using PriceFeed for uint256;\n\n    struct Info {\n        address _address;\n        string name;\n        uint256 LimitInUSD;\n        uint256 AmountInWEI;\n        uint256 Timestamp;\n    }\n\n    AggregatorV3Interface private priceFeed;\n\n    Info[] private Donation;\n\n    event Success(uint256 amount, address sender);\n\n    error NotFunder();\n\n    error AcceptanceRequirements();\n\n    error IDNotFound();\n\n    error CallFail();\n\n    modifier FundRaiser(uint256 _id) {\n        //require(Donation[_id]._address == msg.sender, \"You are not a fundraiser of this donation.\");\n        if (Donation[_id]._address != msg.sender) {\n            revert NotFunder();\n        } //more efficient than using require statement\n        _;\n    }\n\n    modifier WithdrawalConditions(uint256 _id) {\n        /*require(block.timestamp >= (Donation[_id].Timestamp + 1 weeks) ||\n        (Donation[_id].AmountInWEI.PriceConverter()) >= (Donation[_id].LimitInUSD * 1e18), \"does not meet the acceptance requirements\");*/\n\n        if (\n            block.timestamp <= (Donation[_id].Timestamp + 1 weeks) &&\n            (Donation[_id].AmountInWEI.PriceConverter(priceFeed)) <=\n            (Donation[_id].LimitInUSD * 1e18)\n        ) {\n            revert AcceptanceRequirements();\n        }\n        _;\n    }\n\n    modifier FoundID(uint256 _id) {\n        if (Donation[_id]._address == address(0)) {\n            revert IDNotFound();\n        }\n        _;\n    }\n\n    constructor(address feed) {\n        priceFeed = AggregatorV3Interface(feed);\n    }\n\n    receive() external payable {}\n\n    fallback() external payable {}\n\n    function create(string memory _name, uint _LimitInUSD) public {\n        Info memory _info;\n        _info.name = _name;\n        _info.LimitInUSD = _LimitInUSD;\n        _info._address = msg.sender;\n        _info.Timestamp = block.timestamp;\n        Donation.push(_info);\n    }\n\n    function participate(uint256 _id) public payable FoundID(_id) {\n        Donation[_id].AmountInWEI += msg.value;\n    }\n\n    function withdraw(\n        uint256 _id\n    ) public FoundID(_id) FundRaiser(_id) WithdrawalConditions(_id) {\n        uint256 amount = Donation[_id].AmountInWEI;\n        delete Donation[_id];\n        (bool success, ) = payable(msg.sender).call{value: amount}(\"\");\n\n        if (!success) {\n            revert CallFail();\n        } else {\n            emit Success(amount, msg.sender);\n        }\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return priceFeed;\n    }\n\n    function getDonation(uint256 Index) public view returns (Info memory) {\n        return Donation[Index];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}